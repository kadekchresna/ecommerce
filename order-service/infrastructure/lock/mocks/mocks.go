// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockDistributedLock creates a new instance of MockDistributedLock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDistributedLock(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDistributedLock {
	mock := &MockDistributedLock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDistributedLock is an autogenerated mock type for the DistributedLock type
type MockDistributedLock struct {
	mock.Mock
}

type MockDistributedLock_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDistributedLock) EXPECT() *MockDistributedLock_Expecter {
	return &MockDistributedLock_Expecter{mock: &_m.Mock}
}

// Acquire provides a mock function for the type MockDistributedLock
func (_mock *MockDistributedLock) Acquire(ctx context.Context, key string, ttlSeconds int) (bool, error) {
	ret := _mock.Called(ctx, key, ttlSeconds)

	if len(ret) == 0 {
		panic("no return value specified for Acquire")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int) (bool, error)); ok {
		return returnFunc(ctx, key, ttlSeconds)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int) bool); ok {
		r0 = returnFunc(ctx, key, ttlSeconds)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = returnFunc(ctx, key, ttlSeconds)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDistributedLock_Acquire_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Acquire'
type MockDistributedLock_Acquire_Call struct {
	*mock.Call
}

// Acquire is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - ttlSeconds int
func (_e *MockDistributedLock_Expecter) Acquire(ctx interface{}, key interface{}, ttlSeconds interface{}) *MockDistributedLock_Acquire_Call {
	return &MockDistributedLock_Acquire_Call{Call: _e.mock.On("Acquire", ctx, key, ttlSeconds)}
}

func (_c *MockDistributedLock_Acquire_Call) Run(run func(ctx context.Context, key string, ttlSeconds int)) *MockDistributedLock_Acquire_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDistributedLock_Acquire_Call) Return(b bool, err error) *MockDistributedLock_Acquire_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockDistributedLock_Acquire_Call) RunAndReturn(run func(ctx context.Context, key string, ttlSeconds int) (bool, error)) *MockDistributedLock_Acquire_Call {
	_c.Call.Return(run)
	return _c
}

// Release provides a mock function for the type MockDistributedLock
func (_mock *MockDistributedLock) Release(ctx context.Context, key string) error {
	ret := _mock.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Release")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, key)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDistributedLock_Release_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Release'
type MockDistributedLock_Release_Call struct {
	*mock.Call
}

// Release is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockDistributedLock_Expecter) Release(ctx interface{}, key interface{}) *MockDistributedLock_Release_Call {
	return &MockDistributedLock_Release_Call{Call: _e.mock.On("Release", ctx, key)}
}

func (_c *MockDistributedLock_Release_Call) Run(run func(ctx context.Context, key string)) *MockDistributedLock_Release_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDistributedLock_Release_Call) Return(err error) *MockDistributedLock_Release_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDistributedLock_Release_Call) RunAndReturn(run func(ctx context.Context, key string) error) *MockDistributedLock_Release_Call {
	_c.Call.Return(run)
	return _c
}
