// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockProducer creates a new instance of MockProducer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProducer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProducer {
	mock := &MockProducer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProducer is an autogenerated mock type for the Producer type
type MockProducer struct {
	mock.Mock
}

type MockProducer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProducer) EXPECT() *MockProducer_Expecter {
	return &MockProducer_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockProducer
func (_mock *MockProducer) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProducer_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockProducer_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockProducer_Expecter) Close() *MockProducer_Close_Call {
	return &MockProducer_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockProducer_Close_Call) Run(run func()) *MockProducer_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProducer_Close_Call) Return(err error) *MockProducer_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProducer_Close_Call) RunAndReturn(run func() error) *MockProducer_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function for the type MockProducer
func (_mock *MockProducer) Publish(ctx context.Context, key []byte, value []byte) error {
	ret := _mock.Called(ctx, key, value)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []byte, []byte) error); ok {
		r0 = returnFunc(ctx, key, value)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProducer_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockProducer_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - key []byte
//   - value []byte
func (_e *MockProducer_Expecter) Publish(ctx interface{}, key interface{}, value interface{}) *MockProducer_Publish_Call {
	return &MockProducer_Publish_Call{Call: _e.mock.On("Publish", ctx, key, value)}
}

func (_c *MockProducer_Publish_Call) Run(run func(ctx context.Context, key []byte, value []byte)) *MockProducer_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []byte
		if args[1] != nil {
			arg1 = args[1].([]byte)
		}
		var arg2 []byte
		if args[2] != nil {
			arg2 = args[2].([]byte)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockProducer_Publish_Call) Return(err error) *MockProducer_Publish_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProducer_Publish_Call) RunAndReturn(run func(ctx context.Context, key []byte, value []byte) error) *MockProducer_Publish_Call {
	_c.Call.Return(run)
	return _c
}
