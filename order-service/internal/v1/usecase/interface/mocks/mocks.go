// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/google/uuid"
	"github.com/kadekchresna/ecommerce/order-service/internal/v1/dto"
	"github.com/kadekchresna/ecommerce/order-service/internal/v1/model"
	mock "github.com/stretchr/testify/mock"
)

// NewMockIOrdersUsecase creates a new instance of MockIOrdersUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIOrdersUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIOrdersUsecase {
	mock := &MockIOrdersUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIOrdersUsecase is an autogenerated mock type for the IOrdersUsecase type
type MockIOrdersUsecase struct {
	mock.Mock
}

type MockIOrdersUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIOrdersUsecase) EXPECT() *MockIOrdersUsecase_Expecter {
	return &MockIOrdersUsecase_Expecter{mock: &_m.Mock}
}

// Checkout provides a mock function for the type MockIOrdersUsecase
func (_mock *MockIOrdersUsecase) Checkout(ctx context.Context, request *dto.CheckoutRequest) error {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Checkout")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dto.CheckoutRequest) error); ok {
		r0 = returnFunc(ctx, request)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIOrdersUsecase_Checkout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Checkout'
type MockIOrdersUsecase_Checkout_Call struct {
	*mock.Call
}

// Checkout is a helper method to define mock.On call
//   - ctx context.Context
//   - request *dto.CheckoutRequest
func (_e *MockIOrdersUsecase_Expecter) Checkout(ctx interface{}, request interface{}) *MockIOrdersUsecase_Checkout_Call {
	return &MockIOrdersUsecase_Checkout_Call{Call: _e.mock.On("Checkout", ctx, request)}
}

func (_c *MockIOrdersUsecase_Checkout_Call) Run(run func(ctx context.Context, request *dto.CheckoutRequest)) *MockIOrdersUsecase_Checkout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *dto.CheckoutRequest
		if args[1] != nil {
			arg1 = args[1].(*dto.CheckoutRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIOrdersUsecase_Checkout_Call) Return(err error) *MockIOrdersUsecase_Checkout_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIOrdersUsecase_Checkout_Call) RunAndReturn(run func(ctx context.Context, request *dto.CheckoutRequest) error) *MockIOrdersUsecase_Checkout_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessInbox provides a mock function for the type MockIOrdersUsecase
func (_mock *MockIOrdersUsecase) ProcessInbox(ctx context.Context, request *dto.ProcessInboxRequest) error {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ProcessInbox")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dto.ProcessInboxRequest) error); ok {
		r0 = returnFunc(ctx, request)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIOrdersUsecase_ProcessInbox_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessInbox'
type MockIOrdersUsecase_ProcessInbox_Call struct {
	*mock.Call
}

// ProcessInbox is a helper method to define mock.On call
//   - ctx context.Context
//   - request *dto.ProcessInboxRequest
func (_e *MockIOrdersUsecase_Expecter) ProcessInbox(ctx interface{}, request interface{}) *MockIOrdersUsecase_ProcessInbox_Call {
	return &MockIOrdersUsecase_ProcessInbox_Call{Call: _e.mock.On("ProcessInbox", ctx, request)}
}

func (_c *MockIOrdersUsecase_ProcessInbox_Call) Run(run func(ctx context.Context, request *dto.ProcessInboxRequest)) *MockIOrdersUsecase_ProcessInbox_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *dto.ProcessInboxRequest
		if args[1] != nil {
			arg1 = args[1].(*dto.ProcessInboxRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIOrdersUsecase_ProcessInbox_Call) Return(err error) *MockIOrdersUsecase_ProcessInbox_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIOrdersUsecase_ProcessInbox_Call) RunAndReturn(run func(ctx context.Context, request *dto.ProcessInboxRequest) error) *MockIOrdersUsecase_ProcessInbox_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessOutbox provides a mock function for the type MockIOrdersUsecase
func (_mock *MockIOrdersUsecase) ProcessOutbox(ctx context.Context, request *dto.ProcessOutboxRequest) error {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ProcessOutbox")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dto.ProcessOutboxRequest) error); ok {
		r0 = returnFunc(ctx, request)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIOrdersUsecase_ProcessOutbox_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessOutbox'
type MockIOrdersUsecase_ProcessOutbox_Call struct {
	*mock.Call
}

// ProcessOutbox is a helper method to define mock.On call
//   - ctx context.Context
//   - request *dto.ProcessOutboxRequest
func (_e *MockIOrdersUsecase_Expecter) ProcessOutbox(ctx interface{}, request interface{}) *MockIOrdersUsecase_ProcessOutbox_Call {
	return &MockIOrdersUsecase_ProcessOutbox_Call{Call: _e.mock.On("ProcessOutbox", ctx, request)}
}

func (_c *MockIOrdersUsecase_ProcessOutbox_Call) Run(run func(ctx context.Context, request *dto.ProcessOutboxRequest)) *MockIOrdersUsecase_ProcessOutbox_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *dto.ProcessOutboxRequest
		if args[1] != nil {
			arg1 = args[1].(*dto.ProcessOutboxRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIOrdersUsecase_ProcessOutbox_Call) Return(err error) *MockIOrdersUsecase_ProcessOutbox_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIOrdersUsecase_ProcessOutbox_Call) RunAndReturn(run func(ctx context.Context, request *dto.ProcessOutboxRequest) error) *MockIOrdersUsecase_ProcessOutbox_Call {
	_c.Call.Return(run)
	return _c
}

// StoreToInbox provides a mock function for the type MockIOrdersUsecase
func (_mock *MockIOrdersUsecase) StoreToInbox(ctx context.Context, i model.Inbox) error {
	ret := _mock.Called(ctx, i)

	if len(ret) == 0 {
		panic("no return value specified for StoreToInbox")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.Inbox) error); ok {
		r0 = returnFunc(ctx, i)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIOrdersUsecase_StoreToInbox_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreToInbox'
type MockIOrdersUsecase_StoreToInbox_Call struct {
	*mock.Call
}

// StoreToInbox is a helper method to define mock.On call
//   - ctx context.Context
//   - i model.Inbox
func (_e *MockIOrdersUsecase_Expecter) StoreToInbox(ctx interface{}, i interface{}) *MockIOrdersUsecase_StoreToInbox_Call {
	return &MockIOrdersUsecase_StoreToInbox_Call{Call: _e.mock.On("StoreToInbox", ctx, i)}
}

func (_c *MockIOrdersUsecase_StoreToInbox_Call) Run(run func(ctx context.Context, i model.Inbox)) *MockIOrdersUsecase_StoreToInbox_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 model.Inbox
		if args[1] != nil {
			arg1 = args[1].(model.Inbox)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIOrdersUsecase_StoreToInbox_Call) Return(err error) *MockIOrdersUsecase_StoreToInbox_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIOrdersUsecase_StoreToInbox_Call) RunAndReturn(run func(ctx context.Context, i model.Inbox) error) *MockIOrdersUsecase_StoreToInbox_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrderStatusCompleted provides a mock function for the type MockIOrdersUsecase
func (_mock *MockIOrdersUsecase) UpdateOrderStatusCompleted(ctx context.Context, orderUUID uuid.UUID) error {
	ret := _mock.Called(ctx, orderUUID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrderStatusCompleted")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, orderUUID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIOrdersUsecase_UpdateOrderStatusCompleted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrderStatusCompleted'
type MockIOrdersUsecase_UpdateOrderStatusCompleted_Call struct {
	*mock.Call
}

// UpdateOrderStatusCompleted is a helper method to define mock.On call
//   - ctx context.Context
//   - orderUUID uuid.UUID
func (_e *MockIOrdersUsecase_Expecter) UpdateOrderStatusCompleted(ctx interface{}, orderUUID interface{}) *MockIOrdersUsecase_UpdateOrderStatusCompleted_Call {
	return &MockIOrdersUsecase_UpdateOrderStatusCompleted_Call{Call: _e.mock.On("UpdateOrderStatusCompleted", ctx, orderUUID)}
}

func (_c *MockIOrdersUsecase_UpdateOrderStatusCompleted_Call) Run(run func(ctx context.Context, orderUUID uuid.UUID)) *MockIOrdersUsecase_UpdateOrderStatusCompleted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIOrdersUsecase_UpdateOrderStatusCompleted_Call) Return(err error) *MockIOrdersUsecase_UpdateOrderStatusCompleted_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIOrdersUsecase_UpdateOrderStatusCompleted_Call) RunAndReturn(run func(ctx context.Context, orderUUID uuid.UUID) error) *MockIOrdersUsecase_UpdateOrderStatusCompleted_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrderStatusExpired provides a mock function for the type MockIOrdersUsecase
func (_mock *MockIOrdersUsecase) UpdateOrderStatusExpired(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrderStatusExpired")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIOrdersUsecase_UpdateOrderStatusExpired_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrderStatusExpired'
type MockIOrdersUsecase_UpdateOrderStatusExpired_Call struct {
	*mock.Call
}

// UpdateOrderStatusExpired is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIOrdersUsecase_Expecter) UpdateOrderStatusExpired(ctx interface{}) *MockIOrdersUsecase_UpdateOrderStatusExpired_Call {
	return &MockIOrdersUsecase_UpdateOrderStatusExpired_Call{Call: _e.mock.On("UpdateOrderStatusExpired", ctx)}
}

func (_c *MockIOrdersUsecase_UpdateOrderStatusExpired_Call) Run(run func(ctx context.Context)) *MockIOrdersUsecase_UpdateOrderStatusExpired_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIOrdersUsecase_UpdateOrderStatusExpired_Call) Return(err error) *MockIOrdersUsecase_UpdateOrderStatusExpired_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIOrdersUsecase_UpdateOrderStatusExpired_Call) RunAndReturn(run func(ctx context.Context) error) *MockIOrdersUsecase_UpdateOrderStatusExpired_Call {
	_c.Call.Return(run)
	return _c
}
