// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/google/uuid"
	"github.com/kadekchresna/ecommerce/order-service/internal/v1/dto"
	"github.com/kadekchresna/ecommerce/order-service/internal/v1/model"
	mock "github.com/stretchr/testify/mock"
)

// NewMockIOrdersRepository creates a new instance of MockIOrdersRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIOrdersRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIOrdersRepository {
	mock := &MockIOrdersRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIOrdersRepository is an autogenerated mock type for the IOrdersRepository type
type MockIOrdersRepository struct {
	mock.Mock
}

type MockIOrdersRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIOrdersRepository) EXPECT() *MockIOrdersRepository_Expecter {
	return &MockIOrdersRepository_Expecter{mock: &_m.Mock}
}

// Checkout provides a mock function for the type MockIOrdersRepository
func (_mock *MockIOrdersRepository) Checkout(ctx context.Context, request *dto.CreateCheckoutRequest) error {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Checkout")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dto.CreateCheckoutRequest) error); ok {
		r0 = returnFunc(ctx, request)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIOrdersRepository_Checkout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Checkout'
type MockIOrdersRepository_Checkout_Call struct {
	*mock.Call
}

// Checkout is a helper method to define mock.On call
//   - ctx context.Context
//   - request *dto.CreateCheckoutRequest
func (_e *MockIOrdersRepository_Expecter) Checkout(ctx interface{}, request interface{}) *MockIOrdersRepository_Checkout_Call {
	return &MockIOrdersRepository_Checkout_Call{Call: _e.mock.On("Checkout", ctx, request)}
}

func (_c *MockIOrdersRepository_Checkout_Call) Run(run func(ctx context.Context, request *dto.CreateCheckoutRequest)) *MockIOrdersRepository_Checkout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *dto.CreateCheckoutRequest
		if args[1] != nil {
			arg1 = args[1].(*dto.CreateCheckoutRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIOrdersRepository_Checkout_Call) Return(err error) *MockIOrdersRepository_Checkout_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIOrdersRepository_Checkout_Call) RunAndReturn(run func(ctx context.Context, request *dto.CreateCheckoutRequest) error) *MockIOrdersRepository_Checkout_Call {
	_c.Call.Return(run)
	return _c
}

// CreateInbox provides a mock function for the type MockIOrdersRepository
func (_mock *MockIOrdersRepository) CreateInbox(ctx context.Context, i model.Inbox) error {
	ret := _mock.Called(ctx, i)

	if len(ret) == 0 {
		panic("no return value specified for CreateInbox")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.Inbox) error); ok {
		r0 = returnFunc(ctx, i)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIOrdersRepository_CreateInbox_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateInbox'
type MockIOrdersRepository_CreateInbox_Call struct {
	*mock.Call
}

// CreateInbox is a helper method to define mock.On call
//   - ctx context.Context
//   - i model.Inbox
func (_e *MockIOrdersRepository_Expecter) CreateInbox(ctx interface{}, i interface{}) *MockIOrdersRepository_CreateInbox_Call {
	return &MockIOrdersRepository_CreateInbox_Call{Call: _e.mock.On("CreateInbox", ctx, i)}
}

func (_c *MockIOrdersRepository_CreateInbox_Call) Run(run func(ctx context.Context, i model.Inbox)) *MockIOrdersRepository_CreateInbox_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 model.Inbox
		if args[1] != nil {
			arg1 = args[1].(model.Inbox)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIOrdersRepository_CreateInbox_Call) Return(err error) *MockIOrdersRepository_CreateInbox_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIOrdersRepository_CreateInbox_Call) RunAndReturn(run func(ctx context.Context, i model.Inbox) error) *MockIOrdersRepository_CreateInbox_Call {
	_c.Call.Return(run)
	return _c
}

// GetInboxList provides a mock function for the type MockIOrdersRepository
func (_mock *MockIOrdersRepository) GetInboxList(ctx context.Context, p dto.ProcessInboxRequest) ([]model.Inbox, error) {
	ret := _mock.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for GetInboxList")
	}

	var r0 []model.Inbox
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dto.ProcessInboxRequest) ([]model.Inbox, error)); ok {
		return returnFunc(ctx, p)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, dto.ProcessInboxRequest) []model.Inbox); ok {
		r0 = returnFunc(ctx, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Inbox)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, dto.ProcessInboxRequest) error); ok {
		r1 = returnFunc(ctx, p)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIOrdersRepository_GetInboxList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInboxList'
type MockIOrdersRepository_GetInboxList_Call struct {
	*mock.Call
}

// GetInboxList is a helper method to define mock.On call
//   - ctx context.Context
//   - p dto.ProcessInboxRequest
func (_e *MockIOrdersRepository_Expecter) GetInboxList(ctx interface{}, p interface{}) *MockIOrdersRepository_GetInboxList_Call {
	return &MockIOrdersRepository_GetInboxList_Call{Call: _e.mock.On("GetInboxList", ctx, p)}
}

func (_c *MockIOrdersRepository_GetInboxList_Call) Run(run func(ctx context.Context, p dto.ProcessInboxRequest)) *MockIOrdersRepository_GetInboxList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 dto.ProcessInboxRequest
		if args[1] != nil {
			arg1 = args[1].(dto.ProcessInboxRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIOrdersRepository_GetInboxList_Call) Return(inboxs []model.Inbox, err error) *MockIOrdersRepository_GetInboxList_Call {
	_c.Call.Return(inboxs, err)
	return _c
}

func (_c *MockIOrdersRepository_GetInboxList_Call) RunAndReturn(run func(ctx context.Context, p dto.ProcessInboxRequest) ([]model.Inbox, error)) *MockIOrdersRepository_GetInboxList_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrderList provides a mock function for the type MockIOrdersRepository
func (_mock *MockIOrdersRepository) GetOrderList(ctx context.Context, p dto.ProcessExpiredOrderRequest) ([]model.Order, error) {
	ret := _mock.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderList")
	}

	var r0 []model.Order
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dto.ProcessExpiredOrderRequest) ([]model.Order, error)); ok {
		return returnFunc(ctx, p)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, dto.ProcessExpiredOrderRequest) []model.Order); ok {
		r0 = returnFunc(ctx, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Order)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, dto.ProcessExpiredOrderRequest) error); ok {
		r1 = returnFunc(ctx, p)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIOrdersRepository_GetOrderList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrderList'
type MockIOrdersRepository_GetOrderList_Call struct {
	*mock.Call
}

// GetOrderList is a helper method to define mock.On call
//   - ctx context.Context
//   - p dto.ProcessExpiredOrderRequest
func (_e *MockIOrdersRepository_Expecter) GetOrderList(ctx interface{}, p interface{}) *MockIOrdersRepository_GetOrderList_Call {
	return &MockIOrdersRepository_GetOrderList_Call{Call: _e.mock.On("GetOrderList", ctx, p)}
}

func (_c *MockIOrdersRepository_GetOrderList_Call) Run(run func(ctx context.Context, p dto.ProcessExpiredOrderRequest)) *MockIOrdersRepository_GetOrderList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 dto.ProcessExpiredOrderRequest
		if args[1] != nil {
			arg1 = args[1].(dto.ProcessExpiredOrderRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIOrdersRepository_GetOrderList_Call) Return(orders []model.Order, err error) *MockIOrdersRepository_GetOrderList_Call {
	_c.Call.Return(orders, err)
	return _c
}

func (_c *MockIOrdersRepository_GetOrderList_Call) RunAndReturn(run func(ctx context.Context, p dto.ProcessExpiredOrderRequest) ([]model.Order, error)) *MockIOrdersRepository_GetOrderList_Call {
	_c.Call.Return(run)
	return _c
}

// GetOutboxList provides a mock function for the type MockIOrdersRepository
func (_mock *MockIOrdersRepository) GetOutboxList(ctx context.Context, p dto.ProcessOutboxRequest) ([]model.Outbox, error) {
	ret := _mock.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for GetOutboxList")
	}

	var r0 []model.Outbox
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dto.ProcessOutboxRequest) ([]model.Outbox, error)); ok {
		return returnFunc(ctx, p)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, dto.ProcessOutboxRequest) []model.Outbox); ok {
		r0 = returnFunc(ctx, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Outbox)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, dto.ProcessOutboxRequest) error); ok {
		r1 = returnFunc(ctx, p)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIOrdersRepository_GetOutboxList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOutboxList'
type MockIOrdersRepository_GetOutboxList_Call struct {
	*mock.Call
}

// GetOutboxList is a helper method to define mock.On call
//   - ctx context.Context
//   - p dto.ProcessOutboxRequest
func (_e *MockIOrdersRepository_Expecter) GetOutboxList(ctx interface{}, p interface{}) *MockIOrdersRepository_GetOutboxList_Call {
	return &MockIOrdersRepository_GetOutboxList_Call{Call: _e.mock.On("GetOutboxList", ctx, p)}
}

func (_c *MockIOrdersRepository_GetOutboxList_Call) Run(run func(ctx context.Context, p dto.ProcessOutboxRequest)) *MockIOrdersRepository_GetOutboxList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 dto.ProcessOutboxRequest
		if args[1] != nil {
			arg1 = args[1].(dto.ProcessOutboxRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIOrdersRepository_GetOutboxList_Call) Return(outboxs []model.Outbox, err error) *MockIOrdersRepository_GetOutboxList_Call {
	_c.Call.Return(outboxs, err)
	return _c
}

func (_c *MockIOrdersRepository_GetOutboxList_Call) RunAndReturn(run func(ctx context.Context, p dto.ProcessOutboxRequest) ([]model.Outbox, error)) *MockIOrdersRepository_GetOutboxList_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrderStatusWithOutbox provides a mock function for the type MockIOrdersRepository
func (_mock *MockIOrdersRepository) UpdateOrderStatusWithOutbox(ctx context.Context, p dto.UpdateOrderStatusRequest) error {
	ret := _mock.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrderStatusWithOutbox")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dto.UpdateOrderStatusRequest) error); ok {
		r0 = returnFunc(ctx, p)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIOrdersRepository_UpdateOrderStatusWithOutbox_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrderStatusWithOutbox'
type MockIOrdersRepository_UpdateOrderStatusWithOutbox_Call struct {
	*mock.Call
}

// UpdateOrderStatusWithOutbox is a helper method to define mock.On call
//   - ctx context.Context
//   - p dto.UpdateOrderStatusRequest
func (_e *MockIOrdersRepository_Expecter) UpdateOrderStatusWithOutbox(ctx interface{}, p interface{}) *MockIOrdersRepository_UpdateOrderStatusWithOutbox_Call {
	return &MockIOrdersRepository_UpdateOrderStatusWithOutbox_Call{Call: _e.mock.On("UpdateOrderStatusWithOutbox", ctx, p)}
}

func (_c *MockIOrdersRepository_UpdateOrderStatusWithOutbox_Call) Run(run func(ctx context.Context, p dto.UpdateOrderStatusRequest)) *MockIOrdersRepository_UpdateOrderStatusWithOutbox_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 dto.UpdateOrderStatusRequest
		if args[1] != nil {
			arg1 = args[1].(dto.UpdateOrderStatusRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIOrdersRepository_UpdateOrderStatusWithOutbox_Call) Return(err error) *MockIOrdersRepository_UpdateOrderStatusWithOutbox_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIOrdersRepository_UpdateOrderStatusWithOutbox_Call) RunAndReturn(run func(ctx context.Context, p dto.UpdateOrderStatusRequest) error) *MockIOrdersRepository_UpdateOrderStatusWithOutbox_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOutboxStatus provides a mock function for the type MockIOrdersRepository
func (_mock *MockIOrdersRepository) UpdateOutboxStatus(ctx context.Context, o *model.Outbox, newStatus model.OutboxStatusType) error {
	ret := _mock.Called(ctx, o, newStatus)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOutboxStatus")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.Outbox, model.OutboxStatusType) error); ok {
		r0 = returnFunc(ctx, o, newStatus)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIOrdersRepository_UpdateOutboxStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOutboxStatus'
type MockIOrdersRepository_UpdateOutboxStatus_Call struct {
	*mock.Call
}

// UpdateOutboxStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - o *model.Outbox
//   - newStatus model.OutboxStatusType
func (_e *MockIOrdersRepository_Expecter) UpdateOutboxStatus(ctx interface{}, o interface{}, newStatus interface{}) *MockIOrdersRepository_UpdateOutboxStatus_Call {
	return &MockIOrdersRepository_UpdateOutboxStatus_Call{Call: _e.mock.On("UpdateOutboxStatus", ctx, o, newStatus)}
}

func (_c *MockIOrdersRepository_UpdateOutboxStatus_Call) Run(run func(ctx context.Context, o *model.Outbox, newStatus model.OutboxStatusType)) *MockIOrdersRepository_UpdateOutboxStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *model.Outbox
		if args[1] != nil {
			arg1 = args[1].(*model.Outbox)
		}
		var arg2 model.OutboxStatusType
		if args[2] != nil {
			arg2 = args[2].(model.OutboxStatusType)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIOrdersRepository_UpdateOutboxStatus_Call) Return(err error) *MockIOrdersRepository_UpdateOutboxStatus_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIOrdersRepository_UpdateOutboxStatus_Call) RunAndReturn(run func(ctx context.Context, o *model.Outbox, newStatus model.OutboxStatusType) error) *MockIOrdersRepository_UpdateOutboxStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIProductRepository creates a new instance of MockIProductRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIProductRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIProductRepository {
	mock := &MockIProductRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIProductRepository is an autogenerated mock type for the IProductRepository type
type MockIProductRepository struct {
	mock.Mock
}

type MockIProductRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIProductRepository) EXPECT() *MockIProductRepository_Expecter {
	return &MockIProductRepository_Expecter{mock: &_m.Mock}
}

// GetProduct provides a mock function for the type MockIProductRepository
func (_mock *MockIProductRepository) GetProduct(ctx context.Context, productUUID uuid.UUID) (*model.Products, error) {
	ret := _mock.Called(ctx, productUUID)

	if len(ret) == 0 {
		panic("no return value specified for GetProduct")
	}

	var r0 *model.Products
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.Products, error)); ok {
		return returnFunc(ctx, productUUID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.Products); ok {
		r0 = returnFunc(ctx, productUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Products)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, productUUID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIProductRepository_GetProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProduct'
type MockIProductRepository_GetProduct_Call struct {
	*mock.Call
}

// GetProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - productUUID uuid.UUID
func (_e *MockIProductRepository_Expecter) GetProduct(ctx interface{}, productUUID interface{}) *MockIProductRepository_GetProduct_Call {
	return &MockIProductRepository_GetProduct_Call{Call: _e.mock.On("GetProduct", ctx, productUUID)}
}

func (_c *MockIProductRepository_GetProduct_Call) Run(run func(ctx context.Context, productUUID uuid.UUID)) *MockIProductRepository_GetProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIProductRepository_GetProduct_Call) Return(products *model.Products, err error) *MockIProductRepository_GetProduct_Call {
	_c.Call.Return(products, err)
	return _c
}

func (_c *MockIProductRepository_GetProduct_Call) RunAndReturn(run func(ctx context.Context, productUUID uuid.UUID) (*model.Products, error)) *MockIProductRepository_GetProduct_Call {
	_c.Call.Return(run)
	return _c
}
